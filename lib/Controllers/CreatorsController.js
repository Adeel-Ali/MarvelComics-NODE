/**
 * MarvelComicsLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 05/25/2016
 */

var _request = require('../Http/Client/RequestClient'),
    _configuration = require('../configuration'),
    _APIHelper = require('../APIHelper');

var CreatorsController = {

    /**
     * Fetches a single creator by id.
     * @param {string} creatorId    Required parameter: A single creator id.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {Creator}
     */
    getCreatorIndividual : function(creatorId, callback){

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/creators/{creatorId}";
        
        //Process template parameters
        _queryBuilder = _APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            "creatorId" : creatorId
        });

        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "apikey" : _configuration.apikey
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept" : "application/json",
            "referer" : _configuration.referer
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb(_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null,JSON.parse(_response.body),_context);
            } else if (_response.statusCode == 404) {
                callback({errorMessage: "Creator not found.", errorCode: 404, errorResponse:_response.body},null,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse:_response.body},null,_context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Fetches lists of comics filtered by a creator id.
     * @param {string} creatorId    Required parameter: A single creator id.
     * @param {string|null} characters    Optional parameter: Return only comics which feature the specified characters (accepts a comma-separated list of ids).
     * @param {string|null} collaborators    Optional parameter: Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).
     * @param {DateDescriptorEnum|null} dateDescriptor    Optional parameter: Return comics within a predefined date range.
     * @param {string|null} dateRange    Optional parameter: Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.
     * @param {string|null} diamondCode    Optional parameter: Filter by diamond code.
     * @param {string|null} digitalId    Optional parameter: Filter by digital comic id.
     * @param {string|null} ean    Optional parameter: Filter by EAN.
     * @param {string|null} events    Optional parameter: Return only comics which take place in the specified events (accepts a comma-separated list of ids).
     * @param {string|null} format    Optional parameter: Filter by the issue format (e.g. comic, digital comic, hardcover). (Acceptable values are: "comic", "magazine", "trade paperback", "hardcover", "digest", "graphic novel", "digital comic", "infinite comic")
     * @param {FormatTypeEnum|null} formatType    Optional parameter: Filter by the issue format type (comic or collection).
     * @param {string|null} hasDigitalIssue    Optional parameter: Include only results which are available digitally. (Acceptable values are: "true")
     * @param {string|null} isbn    Optional parameter: Filter by ISBN.
     * @param {string|null} issn    Optional parameter: Filter by ISSN.
     * @param {string|null} issueNumber    Optional parameter: Return only issues in series whose issue number matches the input.
     * @param {string|null} limit    Optional parameter: Limit the result set to the specified number of resources.
     * @param {string|null} modifiedSince    Optional parameter: Return only comics which have been modified since the specified date.
     * @param {string|null} noVariants    Optional parameter: Exclude variant comics from the result set. (Acceptable values are: "true")
     * @param {string|null} offset    Optional parameter: Skip the specified number of resources in the result set.
     * @param {string|null} orderBy    Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "focDate", "onsaleDate", "title", "issueNumber", "modified", "-focDate", "-onsaleDate", "-title", "-issueNumber", "-modified")
     * @param {string|null} series    Optional parameter: Return only comics which are part of the specified series (accepts a comma-separated list of ids).
     * @param {string|null} sharedAppearances    Optional parameter: Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).
     * @param {string|null} startYear    Optional parameter: Return only issues in series whose start year matches the input.
     * @param {string|null} stories    Optional parameter: Return only comics which contain the specified stories (accepts a comma-separated list of ids).
     * @param {string|null} title    Optional parameter: Return only issues in series whose title matches the input.
     * @param {string|null} titleStartsWith    Optional parameter: Return only issues in series whose title starts with the input.
     * @param {string|null} upc    Optional parameter: Filter by UPC.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {ComicDataWrapper}
     */
    getComicsCollectionByCreatorId : function(creatorId, characters, collaborators, dateDescriptor, dateRange, diamondCode, digitalId, ean, events, format, formatType, hasDigitalIssue, isbn, issn, issueNumber, limit, modifiedSince, noVariants, offset, orderBy, series, sharedAppearances, startYear, stories, title, titleStartsWith, upc, callback){

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/creators/{creatorId}/comics";
        
        //Process template parameters
        _queryBuilder = _APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            "creatorId" : creatorId
        });

        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "characters" : characters,
            "collaborators" : collaborators,
            "dateDescriptor" : (dateDescriptor != null)?dateDescriptor:null,
            "dateRange" : dateRange,
            "diamondCode" : diamondCode,
            "digitalId" : digitalId,
            "ean" : ean,
            "events" : events,
            "format" : format,
            "formatType" : (formatType != null)?formatType:null,
            "hasDigitalIssue" : hasDigitalIssue,
            "isbn" : isbn,
            "issn" : issn,
            "issueNumber" : issueNumber,
            "limit" : limit,
            "modifiedSince" : modifiedSince,
            "noVariants" : noVariants,
            "offset" : offset,
            "orderBy" : orderBy,
            "series" : series,
            "sharedAppearances" : sharedAppearances,
            "startYear" : startYear,
            "stories" : stories,
            "title" : title,
            "titleStartsWith" : titleStartsWith,
            "upc" : upc,
            "apikey" : _configuration.apikey
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept" : "application/json",
            "referer" : _configuration.referer
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb(_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null,JSON.parse(_response.body),_context);
            } else if (_response.statusCode == 409) {
                callback({errorMessage: "Limit greater than 100.", errorCode: 409, errorResponse:_response.body},null,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse:_response.body},null,_context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Fetches lists of events filtered by a creator id.
     * @param {string} creatorId    Required parameter: A single creator id.
     * @param {string|null} characters    Optional parameter: Return only events which feature the specified characters (accepts a comma-separated list of ids).
     * @param {string|null} comics    Optional parameter: Return only events which take place in the specified comics (accepts a comma-separated list of ids).
     * @param {string|null} limit    Optional parameter: Limit the result set to the specified number of resources.
     * @param {string|null} modifiedSince    Optional parameter: Return only events which have been modified since the specified date.
     * @param {string|null} name    Optional parameter: Filter the event list by name.
     * @param {string|null} nameStartsWith    Optional parameter: Return events with names that begin with the specified string (e.g. Sp).
     * @param {string|null} offset    Optional parameter: Skip the specified number of resources in the result set.
     * @param {string|null} orderBy    Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "name", "startDate", "modified", "-name", "-startDate", "-modified")
     * @param {string|null} series    Optional parameter: Return only events which are part of the specified series (accepts a comma-separated list of ids).
     * @param {string|null} stories    Optional parameter: Return only events which contain the specified stories (accepts a comma-separated list of ids).
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {EventDataWrapper}
     */
    getCreatorEventsCollection : function(creatorId, characters, comics, limit, modifiedSince, name, nameStartsWith, offset, orderBy, series, stories, callback){

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/creators/{creatorId}/events";
        
        //Process template parameters
        _queryBuilder = _APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            "creatorId" : creatorId
        });

        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "characters" : characters,
            "comics" : comics,
            "limit" : limit,
            "modifiedSince" : modifiedSince,
            "name" : name,
            "nameStartsWith" : nameStartsWith,
            "offset" : offset,
            "orderBy" : orderBy,
            "series" : series,
            "stories" : stories,
            "apikey" : _configuration.apikey
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept" : "application/json",
            "referer" : _configuration.referer
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb(_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null,JSON.parse(_response.body),_context);
            } else if (_response.statusCode == 409) {
                callback({errorMessage: "Limit greater than 100.", errorCode: 409, errorResponse:_response.body},null,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse:_response.body},null,_context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Fetches lists of series filtered by a creator id.
     * @param {string} creatorId    Required parameter: A single creator id.
     * @param {string|null} characters    Optional parameter: Return only series which feature the specified characters (accepts a comma-separated list of ids).
     * @param {string|null} comics    Optional parameter: Return only series which contain the specified comics (accepts a comma-separated list of ids).
     * @param {string|null} contains    Optional parameter: Return only series containing one or more comics with the specified format. (Acceptable values are: "comic", "magazine", "trade paperback", "hardcover", "digest", "graphic novel", "digital comic", "infinite comic")
     * @param {string|null} events    Optional parameter: Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids).
     * @param {string|null} limit    Optional parameter: Limit the result set to the specified number of resources.
     * @param {string|null} modifiedSince    Optional parameter: Return only series which have been modified since the specified date.
     * @param {string|null} offset    Optional parameter: Skip the specified number of resources in the result set.
     * @param {string|null} orderBy    Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "title", "modified", "startYear", "-title", "-modified", "-startYear")
     * @param {string|null} seriesType    Optional parameter: Filter the series by publication frequency type. (Acceptable values are: "collection", "one shot", "limited", "ongoing")
     * @param {string|null} startYear    Optional parameter: Return only series matching the specified start year.
     * @param {string|null} stories    Optional parameter: Return only series which contain the specified stories (accepts a comma-separated list of ids).
     * @param {string|null} title    Optional parameter: Filter by series title.
     * @param {string|null} titleStartsWith    Optional parameter: Return series with titles that begin with the specified string (e.g. Sp).
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {SeriesDataWrapper}
     */
    getCreatorSeriesCollection : function(creatorId, characters, comics, contains, events, limit, modifiedSince, offset, orderBy, seriesType, startYear, stories, title, titleStartsWith, callback){

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/creators/{creatorId}/series";
        
        //Process template parameters
        _queryBuilder = _APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            "creatorId" : creatorId
        });

        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "characters" : characters,
            "comics" : comics,
            "contains" : contains,
            "events" : events,
            "limit" : limit,
            "modifiedSince" : modifiedSince,
            "offset" : offset,
            "orderBy" : orderBy,
            "seriesType" : seriesType,
            "startYear" : startYear,
            "stories" : stories,
            "title" : title,
            "titleStartsWith" : titleStartsWith,
            "apikey" : _configuration.apikey
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept" : "application/json",
            "referer" : _configuration.referer
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb(_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null,JSON.parse(_response.body),_context);
            } else if (_response.statusCode == 409) {
                callback({errorMessage: "Limit greater than 100.", errorCode: 409, errorResponse:_response.body},null,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse:_response.body},null,_context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Fetches lists of stories filtered by a creator id.
     * @param {string} creatorId    Required parameter: A single creator id.
     * @param {string|null} characters    Optional parameter: Return only stories which feature the specified characters (accepts a comma-separated list of ids).
     * @param {string|null} comics    Optional parameter: Return only stories contained in the specified comics (accepts a comma-separated list of ids).
     * @param {string|null} events    Optional parameter: Return only stories which take place during the specified events (accepts a comma-separated list of ids).
     * @param {string|null} limit    Optional parameter: Limit the result set to the specified number of resources.
     * @param {string|null} modifiedSince    Optional parameter: Return only stories which have been modified since the specified date.
     * @param {string|null} offset    Optional parameter: Skip the specified number of resources in the result set.
     * @param {string|null} orderBy    Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "id", "modified", "-id", "-modified")
     * @param {string|null} series    Optional parameter: Return only stories contained the specified series (accepts a comma-separated list of ids).
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {StoryDataWrapper}
     */
    getCreatorStoryCollection : function(creatorId, characters, comics, events, limit, modifiedSince, offset, orderBy, series, callback){

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/creators/{creatorId}/stories";
        
        //Process template parameters
        _queryBuilder = _APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            "creatorId" : creatorId
        });

        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "characters" : characters,
            "comics" : comics,
            "events" : events,
            "limit" : limit,
            "modifiedSince" : modifiedSince,
            "offset" : offset,
            "orderBy" : orderBy,
            "series" : series,
            "apikey" : _configuration.apikey
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept" : "application/json",
            "referer" : _configuration.referer
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb(_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null,JSON.parse(_response.body),_context);
            } else if (_response.statusCode == 409) {
                callback({errorMessage: "Limit greater than 100.", errorCode: 409, errorResponse:_response.body},null,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse:_response.body},null,_context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Fetches lists of creators.
     * @param {string|null} comics    Optional parameter: Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).
     * @param {string|null} events    Optional parameter: Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids).
     * @param {string|null} firstName    Optional parameter: Filter by creator first name (e.g. Brian).
     * @param {string|null} firstNameStartsWith    Optional parameter: Filter by creator first names that match critera (e.g. B, St L).
     * @param {string|null} lastName    Optional parameter: Filter by creator last name (e.g. Bendis).
     * @param {string|null} lastNameStartsWith    Optional parameter: Filter by creator last names that match critera (e.g. Ben).
     * @param {string|null} limit    Optional parameter: Limit the result set to the specified number of resources.
     * @param {string|null} middleName    Optional parameter: Filter by creator middle name (e.g. Michael).
     * @param {string|null} middleNameStartsWith    Optional parameter: Filter by creator middle names that match critera (e.g. Mi).
     * @param {string|null} modifiedSince    Optional parameter: Return only creators which have been modified since the specified date.
     * @param {string|null} nameStartsWith    Optional parameter: Filter by creator names that match critera (e.g. B, St L).
     * @param {string|null} offset    Optional parameter: Skip the specified number of resources in the result set.
     * @param {string|null} orderBy    Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "lastName", "firstName", "middleName", "suffix", "modified", "-lastName", "-firstName", "-middleName", "-suffix", "-modified")
     * @param {string|null} series    Optional parameter: Return only creators who worked on the specified series (accepts a comma-separated list of ids).
     * @param {string|null} stories    Optional parameter: Return only creators who worked on the specified stories (accepts a comma-separated list of ids).
     * @param {string|null} suffix    Optional parameter: Filter by suffix or honorific (e.g. Jr., Sr.).
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {CreatorDataWrapper}
     */
    getCreatorCollection : function(comics, events, firstName, firstNameStartsWith, lastName, lastNameStartsWith, limit, middleName, middleNameStartsWith, modifiedSince, nameStartsWith, offset, orderBy, series, stories, suffix, callback){

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/creators";
        
        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "comics" : comics,
            "events" : events,
            "firstName" : firstName,
            "firstNameStartsWith" : firstNameStartsWith,
            "lastName" : lastName,
            "lastNameStartsWith" : lastNameStartsWith,
            "limit" : limit,
            "middleName" : middleName,
            "middleNameStartsWith" : middleNameStartsWith,
            "modifiedSince" : modifiedSince,
            "nameStartsWith" : nameStartsWith,
            "offset" : offset,
            "orderBy" : orderBy,
            "series" : series,
            "stories" : stories,
            "suffix" : suffix,
            "apikey" : _configuration.apikey
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept" : "application/json",
            "referer" : _configuration.referer
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb(_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null,JSON.parse(_response.body),_context);
            } else if (_response.statusCode == 409) {
                callback({errorMessage: "Limit greater than 100.", errorCode: 409, errorResponse:_response.body},null,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse:_response.body},null,_context);
            }
        }
        _request(_options, cb);
    }

};

module.exports = CreatorsController;